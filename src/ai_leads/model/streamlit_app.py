import logging
import streamlit as st
from ai_leads.model import lead_dataset_creation, job_dataset_creation
from ai_leads.Config.param import TIME_WINDOW, SOURCE_LIST_PIPELINE, JOB_LIST_PIPELINE, LOCATION

# Configuration de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuration de la page Streamlit
st.set_page_config(page_title="Lead Generation")


# Fonction pour gÃ©nÃ©rer des leads basÃ© sur l'URL entrÃ©e par l'utilisateur
def generate_leads(user_input: str) -> None:
    """
    Generate leads based on the user input URL and display on the Streamlit app.

    Args:
        user_input (str): The URL provided by the user.
    """
    logger.info("Starting scrapping text data...")
    logger.info("Scrapping is done")
    logger.info("GPT 3.5 is processing...")

    dfCreator = job_dataset_creation.JobDataFrameCreator(SOURCE_LIST_PIPELINE, JOB_LIST_PIPELINE, LOCATION)
    df = dfCreator.find_all_jobs()
    dfConverter = lead_dataset_creation.LeadDataFrameConverter(df)
    df_lead = dfConverter.convert_to_lead_dataframe(TIME_WINDOW)

    df_lead.to_csv("output_example.csv")
    st.table(df_lead)


def main() -> None:
    """
    Main function to handle the Streamlit app interface and interactions.
    """
    # Sidebar contents
    with st.sidebar:
        st.title("ğŸ’¬ Lead Generation")
        st.markdown(
            """
            ## About    
            ğŸ’¡ List of leads generated by Algorithm Dimension for Kara
            """
        )

    user_input = st.text_input("Enter the url of the job postings page:")

    if user_input:
        st.write(f"Searching for customers of {user_input}...")
        generate_leads(user_input)


if __name__ == "__main__":
    main()
